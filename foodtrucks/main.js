/**  Copies food trucks from the private tracking DB to the public food truck DB on datacouch.
  *  This isn't a standalone utility, it depends on data being generated by a separate Java utility
  *  ( see https://github.com/codeforamerica/esri_track_to_couch )
  *
  *  This will only copy documents to the public DB that are currently within Boston city limits
  *  There aren't currently any time constraints but those can be added at a later time if necessary
  * 
  *  Setup environment variables, install dependencies and run
  *    export DATACOUCH_ROOT="http://admin:pass@localhost:5984"
  *    npm install
  *    node foodtrucks.js
  *  Author: Max Ogden (@maxogden)
 **/

if(!process.env['DATACOUCH_ROOT']) throw ("OMGZ YOU HAVE TO SET $DATACOUCH_ROOT");

var request = require('request').defaults({json: true})
  , _ = require('underscore')
  , follow = require('follow')
  ;

var datacouch = process.env['DATACOUCH_ROOT']
  , gpsDB = "/boston-gps" // the private db where esri_track_to_couch saves data from ESRI Tracking Server
  , foodTrucksDB = "/dc8364385fc612b847d66ca7886519749c" // the public food truck database on datacouch
  , lastAction = "server start"
  ;

// for nodejitsu -- they require a running server
require('http').createServer(function (req, res) {
  res.writeHead(200, {'Content-Type': 'text/plain'});
  res.end('food truck private public bridge is up.\nlast action: ' + JSON.stringify(lastAction));
}).listen(1337);

follow({db: datacouch + gpsDB, include_docs: true, filter: "gps/by_value", query_params: {k: "CLIENT_ID", v: "36155"}}, function(error, change) {
  if (error || change.deleted || !("doc" in change) || (change.doc["CITY"] !== "BOSTON")) return;
  
  var source = datacouch + gpsDB + '/' + change.id
    , destination = datacouch + foodTrucksDB + '/' + change.id
    , b = change.doc
    ;  

  var loc = {
    geometry: {type: "Point", coordinates: [ b['LONGITUDE'], b['LATITUDE'] ]},
    truck: b["VEHICLE_LABEL"],
    moving: b["PVT_TYPE"],
    street: b["STREET"],
    cross_street: b["CROSS_STREET"],
    stopped_for: b["STOP_DURATION"],
    heading: b["HEADING"],
    city: b["CITY"],
    gpsID: b["SERIAL_NO"],
    time: new Date(b["LOCATION_TIME"])
  }
    
  request({url: destination, method: "PUT", body: loc}
    , function(err, resp, body) {
      if (err) lastAction = err
      else lastAction = new Date()
      console.log(change.id, body)
    })
})